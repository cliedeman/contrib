// Copyright 2019-present Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/contrib/entgql/internal/todo/ent/private"
	"entgo.io/ent/dialect/sql"
)

// Private is the model entity for the Private schema.
type Private struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PrivateQuery when eager-loading is set.
	Edges            PrivateEdges `json:"edges"`
	private_children *int
}

// PrivateEdges holds the relations/edges for other nodes in the graph.
type PrivateEdges struct {
	// Parent holds the value of the parent edge.
	Parent *Private `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Private `json:"children,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrivateEdges) ParentOrErr() (*Private, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: private.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e PrivateEdges) ChildrenOrErr() ([]*Private, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Private) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case private.FieldID:
			values[i] = new(sql.NullInt64)
		case private.FieldName:
			values[i] = new(sql.NullString)
		case private.ForeignKeys[0]: // private_children
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Private", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Private fields.
func (pr *Private) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case private.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case private.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case private.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field private_children", value)
			} else if value.Valid {
				pr.private_children = new(int)
				*pr.private_children = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryParent queries the "parent" edge of the Private entity.
func (pr *Private) QueryParent() *PrivateQuery {
	return (&PrivateClient{config: pr.config}).QueryParent(pr)
}

// QueryChildren queries the "children" edge of the Private entity.
func (pr *Private) QueryChildren() *PrivateQuery {
	return (&PrivateClient{config: pr.config}).QueryChildren(pr)
}

// Update returns a builder for updating this Private.
// Note that you need to call Private.Unwrap() before calling this method if this Private
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Private) Update() *PrivateUpdateOne {
	return (&PrivateClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Private entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Private) Unwrap() *Private {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Private is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Private) String() string {
	var builder strings.Builder
	builder.WriteString("Private(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", name=")
	builder.WriteString(pr.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Privates is a parsable slice of Private.
type Privates []*Private

func (pr Privates) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
