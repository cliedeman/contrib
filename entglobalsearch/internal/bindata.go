// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/globalsearch.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGlobalsearchTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x4d\x6f\xdb\x38\x13\x3e\x8b\xbf\x62\x5e\xc3\x07\xc9\x48\xa9\xa4\xb7\xe4\x85\x0f\x69\x90\x14\x05\xba\xd9\x74\x53\xa0\xc7\x82\xa6\x46\x12\xb1\x34\xa9\x90\x54\x1a\x43\xe0\x7f\x5f\x90\xa2\x2c\xdb\x49\x17\x01\x36\x87\x58\x9a\x79\x66\xe6\x99\x4f\x0d\x43\xb9\x22\x37\xba\xdb\x19\xd1\xb4\x0e\x3e\x9e\x5f\x5c\x7e\xe8\x0c\x5a\x54\x0e\xee\x18\xc7\x8d\xd6\x7f\xc3\x17\xc5\x29\x5c\x4b\x09\x11\x64\x21\xe8\xcd\x33\x56\x94\x7c\x6f\x85\x05\xab\x7b\xc3\x11\xb8\xae\x10\x84\x05\x29\x38\x2a\x8b\x15\xf4\xaa\x42\x03\xae\x45\xb8\xee\x18\x6f\x11\x3e\xd2\xf3\x49\x0b\xb5\xee\x55\x45\x84\x8a\xfa\xaf\x5f\x6e\x6e\xef\x1f\x6f\xa1\x16\x12\x21\xc9\x8c\xd6\x0e\x2a\x61\x90\x3b\x6d\x76\xa0\x6b\x70\x07\xc1\x9c\x41\xa4\x64\x55\x7a\x4f\xc8\x30\x40\x85\xb5\x50\x08\x8b\x46\xea\x0d\x93\x16\x99\xe1\xed\x02\xbc\x0f\x3a\x87\xdb\x4e\x32\x87\xb0\x68\x91\x55\x68\x16\xb0\x0c\x1a\x22\xb6\x9d\x36\x0e\x72\x92\x2d\xb8\x56\x0e\x5f\xdc\x82\x90\x6c\xd1\x08\xd7\xf6\x1b\xca\xf5\xb6\xbc\xbc\xac\xd0\x8a\x46\xd9\xb2\x79\x92\x0d\xaa\xb2\x31\xac\x6b\x9f\xe4\x82\x14\x31\xaa\x61\xaa\x41\x58\xaa\x90\xf8\xd5\x1a\x96\xf4\x5e\x57\x68\x21\x71\x5a\x62\xd5\xa0\x0d\x8a\x4a\x70\x97\xc8\x24\x93\xa0\x8a\x26\xc1\x96\xde\x46\xa0\xf7\x24\x1b\x06\x10\x35\x2c\x99\x52\xda\x31\x27\xb4\x8a\xa0\x80\xa6\xd7\x7b\x99\xa5\xb7\xca\x7d\xfe\xf6\x35\x5a\xbc\x36\xa1\x9f\x84\xaa\x46\xdd\x1b\xca\x3f\x58\xd7\x09\xd5\x80\xf7\xc3\x00\x35\x13\x12\x16\x9b\x80\x67\xaa\x82\x6d\xd2\xcd\x70\x0b\xcc\x20\x6c\x7b\xd7\x33\x29\x77\x80\x2f\x5c\xf6\x56\x3c\xe3\x62\xb4\xc7\xc3\x40\x29\xdf\x35\x58\x74\xd3\xcb\x48\xfd\x9e\x6d\x11\x72\x29\x6c\x92\xd3\xef\xbb\xee\x0d\x69\x10\x14\xc5\x3e\xab\xbd\xf3\x94\xc4\xc4\x2e\x54\xe4\xcd\x84\xfe\x0b\x8f\xc9\xfb\xeb\xf0\xf3\xe3\xfc\x14\xdb\x6b\x90\xa3\x78\x46\x33\xf7\xf1\xaf\x49\x32\x82\x97\x4f\x3d\x9a\xdd\xac\xfe\x16\x5e\x63\x34\xef\x49\x59\xc2\x8d\x96\x12\xb9\xbb\x13\x28\x2b\x0b\x0e\xa5\xb4\x71\xf2\xa3\xd9\x87\x4d\x2f\x64\xdc\x1f\x0d\xc8\x1a\x34\x72\x07\x52\xb3\x0a\xb8\x56\x0a\xb9\xc3\x0a\x54\x9c\xb6\xcd\x2e\xec\xa3\x96\x21\x6e\x9a\x63\x4a\xea\x5e\x71\xc8\x8f\x58\x7a\x0f\xab\x99\x94\xf7\xc5\x71\xfc\x9c\xbb\x97\xbd\xfd\xcd\xf8\x7b\x06\x96\x39\x61\x6b\x81\x16\x28\xa5\xd6\x99\x58\xa1\x23\x37\x30\x90\x4c\xd4\x50\xf3\x90\x67\xda\x0f\xfa\x19\x47\xaf\xc9\x4f\xf0\x5d\xfc\x3f\x60\xfe\xb7\x06\x25\x64\xb0\xc9\x4e\xc9\xad\xe1\x44\x42\xf9\x01\xbf\xfc\xc0\xf5\x9f\x1d\x9a\xd8\xfb\x43\xf7\x67\x50\x73\x1a\xa1\x07\xac\x29\xa5\x05\xc9\x3c\xc9\x0c\xba\xde\xa8\xd3\x08\xc4\x93\xf7\x55\xea\x88\x49\x28\xd4\x6a\xa2\x73\xca\xe5\x0c\xea\x00\xda\x57\x22\xd5\x18\xab\x53\x6a\xff\x5a\xd0\x61\xf8\x00\xbf\x84\x6b\xa7\xf1\x8d\x33\x59\x6b\x03\x3f\x27\xff\x57\xeb\x74\x4a\x4e\x02\xcd\xcd\x4c\x48\xfa\x88\x41\x1e\x76\xf9\x20\x7a\x11\x5b\x90\xd9\x5f\xc2\xf1\x36\x01\xe3\x64\x46\x71\x8c\x3f\x1d\x37\xb6\xc5\x33\x58\x3e\x33\xd9\x8f\xc7\x8c\xa6\x4d\xcb\x32\xce\x2c\xc2\x7c\xd3\xc4\x04\x0b\x28\xa1\x2a\x7c\xd9\x9b\x5d\x8c\xe7\x42\xd4\xd0\x38\x58\x0a\x38\x07\xef\xcf\x60\xbf\x4f\x8b\x90\xff\x68\x3a\xbe\x8c\xe2\xab\x31\xcc\x3b\x26\xe5\x87\x70\xed\x30\x40\xc7\x2c\x67\x72\xe4\x0c\xde\xe7\xa1\xb7\xf9\x58\xd7\xd5\xac\xce\x8f\xb9\x9d\x87\x95\x8f\xab\x99\x8a\x12\xfe\xa2\x11\x3d\x6d\x7b\x2a\x69\x91\x50\xbe\xd8\x17\x6b\x3e\x84\xe1\x9f\x27\x47\xc2\xdf\x0f\xdf\xef\x6e\xcb\xf4\x39\xab\x04\x0b\x04\x4a\xfb\x24\xcb\x48\xa9\x8c\x04\x6c\xfc\xb4\x65\x65\x09\xa8\xdc\xe1\x27\x0f\x3a\x83\x95\xe0\xcc\x21\xc9\x46\xf9\xc3\x24\x98\x55\x34\x10\xa1\xd3\x1d\x7a\x6f\x60\xdb\x21\x2f\x5f\x7d\x5e\xb3\x78\xc6\xb6\x9b\x60\x24\x94\xd3\xf1\x33\x62\x1d\x73\xb8\x45\xe5\xc6\x32\x2c\xa7\x4b\x76\xb5\xde\x77\x88\x3e\x72\xdd\x21\xfd\x94\x34\x3e\x55\xec\xe8\xa6\xee\x9f\xf7\x0e\x02\x4c\xd4\xaf\xba\x7f\x9a\xe9\xc1\x91\xd1\x46\x34\x42\x31\x79\x27\xa4\x43\x13\xe7\xf7\x67\xc8\x84\x3e\xcc\x85\xca\x4e\x24\xb0\x86\x38\x38\x16\x56\xf6\x49\xa6\xfd\xd1\x66\x5a\x99\x8b\xe0\xc4\xd2\x1b\xa9\x15\xe6\x05\x7d\x44\xf7\x90\x2b\x21\xe3\x2c\x9c\x84\xcb\xed\x45\x41\x5e\x0f\xf0\x29\xe1\x09\x66\xe9\x8f\x16\x4d\x78\xa5\x0f\x79\x51\x8c\x83\x74\xd0\xa1\x7f\x02\x00\x00\xff\xff\x88\x45\x73\x3c\xac\x09\x00\x00")

func templateGlobalsearchTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateGlobalsearchTmpl,
		"template/globalsearch.tmpl",
	)
}

func templateGlobalsearchTmpl() (*asset, error) {
	bytes, err := templateGlobalsearchTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/globalsearch.tmpl", size: 2476, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/globalsearch.tmpl": templateGlobalsearchTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"globalsearch.tmpl": &bintree{templateGlobalsearchTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
